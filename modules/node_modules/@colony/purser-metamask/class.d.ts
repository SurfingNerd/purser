import { MetamaskWalletConstructorArgumentsType } from './types';
export default class MetamaskWallet {
    address: string;
    type: string;
    subtype: string;
    sign: (...any: any[]) => Promise<string>;
    signMessage: (...any: any[]) => Promise<string>;
    verifyMessage: (...any: any[]) => Promise<boolean>;
    constructor({ address }: MetamaskWalletConstructorArgumentsType);
    get publicKey(): Promise<string>;
    /**
     * Recover the public key from a signed message.
     * Sign a message, and use that signature to recover the (R), (S) signature
     * components, along with the reco(V)ery param. We then use those values to
     * recover, set internally, and return the public key.
     *
     * @method recoverPublicKey
     *
     * @param {string} currentAddress The current selected address.
     * Note the we don't need to validate this here since it comes from a trusted
     * source: the class constructor.
     *
     * @return {Promise} The recovered public key (for the currently selected addresss)
     */
    static recoverPublicKey(currentAddress: string): Promise<string>;
}
