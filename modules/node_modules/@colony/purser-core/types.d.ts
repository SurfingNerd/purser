export declare const TYPE_SOFTWARE: string;
export declare const TYPE_HARDWARE: string;
export declare const TYPE_GENERIC: string;
export declare const SUBTYPE_GENERIC: string;
export declare const SUBTYPE_ETHERS: string;
export declare const SUBTYPE_TREZOR: string;
export declare const SUBTYPE_LEDGER: string;
export declare const SUBTYPE_METAMASK: string;
declare const walletTypes: Object;
export default walletTypes;
export declare type DerivationPathDefaultType = {
    HEADER_KEY: string;
    PURPOSE: number;
    COIN_MAINNET: number;
    COIN_TESTNET: number;
    ACCOUNT: number;
    CHANGE: number;
    INDEX: number;
    DELIMITER: string;
};
export declare type DerivationPathObjectType = {
    purpose?: number;
    coinType?: number;
    account?: number;
    change?: number;
    addressIndex?: number;
};
export declare type GenericClassArgumentsType = {
    publicKey: string;
    chainCode?: string;
    rootDerivationPath: string;
    addressCount?: number;
    chainId?: number;
};
export interface TransactionObjectType {
    chainId: number;
    gasPrice: string;
    gasLimit: string;
    nonce: number;
    value: string;
    inputData: string;
}
export interface TransactionObjectTypeWithCallback extends TransactionObjectTypeWithTo {
    callback: (object: any) => string;
}
export interface TransactionObjectTypeWithTo extends TransactionObjectType {
    to: string | undefined;
}
export interface TransactionObjectTypeWithAddresses extends TransactionObjectTypeWithTo {
    from: string | undefined;
}
export interface SignMessageData {
    message: any;
    messageData: any;
}
export declare type WalletObjectType = {
    address: string;
    otherAddresses?: Array<string>;
    defaultGasLimit?: number;
    keystore?: Promise<string>;
    mnemonic?: string;
    path?: string;
    readonly derivationPath?: Promise<string>;
    privateKey?: string;
    readonly publicKey?: Promise<string>;
    sign: (...any: any[]) => Promise<TransactionObjectType>;
};
export declare type WalletArgumentsType = {
    address?: string;
    addressCount?: number;
    privateKey?: string;
    mnemonic?: string;
    originalMnemonic?: string;
    path?: string;
    keystore?: string;
    entropy?: Uint8Array;
    password?: string;
    chainId?: number;
    sign?: (transaction: any) => Promise<string>;
    signMessage?: (message: any) => Promise<string>;
};
export declare type MessageObjectType = {
    message: string;
};
export declare type MessageVerificationObjectType = {
    message: string;
    signature: string;
};
export declare type LibraryExportType = {
    wallets: Object;
    about: {
        name: string;
        version: string;
        environment: string;
    };
    utils: Object;
    debug?: Object;
};
