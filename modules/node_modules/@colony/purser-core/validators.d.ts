/**
 * Validate a derivation path passed in as a string
 *
 * @method derivationPathValidator
 *
 * @param {string} derivationPath The derivation path to check
 *
 * @return {boolean} It only returns true if the derivation path is correct,
 * otherwise an Error will be thrown and this will not finish execution.
 */
export declare const derivationPathValidator: (derivationPath: string) => boolean;
/**
 * Validate an integer passed in to make sure is safe (< 9007199254740991) and positive
 *
 * @method safeIntegerValidator
 *
 * @param {number} integer The integer to validate
 *
 * @return {boolean} It only returns true if the integer is safe and positive,
 * otherwise an Error will be thrown and this will not finish execution.
 */
export declare const safeIntegerValidator: (integer: number) => boolean;
/**
 * Validate a Big Number instance object that was passed in
 *
 * @method bigNumberValidator
 *
 * @param {any} bigNumber The big number instance to check
 *
 * @return {boolean} It only returns true if the object is an instance of Big Number,
 * otherwise an Error will be thrown and this will not finish execution.
 */
export declare const bigNumberValidator: (bigNumber: any) => boolean;
/**
 * Validate a BIP32 Ethereum Address
 *
 * @TODO Validate the checksum of the address.
 *
 * @method addressValidator
 *
 * @param {string} address The 'hex' address to check
 *
 * @return {boolean} It only returns true if the string is a valid address format,
 * otherwise an Error will be thrown and this will not finish execution.
 */
export declare const addressValidator: (address: string) => boolean;
/**
 * Validate a hex string
 *
 * @method hexSequenceValidator
 *
 * @param {string} hexSequence The `hex` string to check
 *
 * @return {boolean} It only returns true if the string is a valid hex format,
 * otherwise an Error will be thrown and this will not finish execution.
 */
export declare const hexSequenceValidator: (hexSequence: string) => boolean;
/**
 * Validate a hex string
 *
 * @method messageValidator
 *
 * @param {string} string The big number instance to check
 *
 * @return {boolean} It only returns true if the string is a valid format,
 * otherwise an Error will be thrown and this will not finish execution.
 */
export declare const messageValidator: (string: string) => boolean;
/**
 * Validate a hex string
 *
 * @method messageDataValidator
 *
 * @param {any} data The messageData to check
 *
 * @return {boolean} It only returns true if the data is a valid format,
 * otherwise an Error will be thrown and this will not finish execution.
 */
export declare const messageDataValidator: (data: any) => boolean;
