import { WalletArgumentsType } from '../purser-core/types';
/**
 * @NOTE We're no longer directly extending the Ethers Wallet Class
 *
 * This is due to the fact that we need more control over the resulting Class
 * object (SoftwareWallet in this case).
 *
 * We're still shadowing the Ethers Wallet, meaning when opening or creating a new
 * wallet, we will first create a Ethers Wallet instance than pass that along
 * to the SoftwareWallet constructor.
 *
 * This way we don't have to deal with non-configurable or non-writable props,
 * or the providers being baked in.
 */
export default class SoftwareWallet {
    address: string;
    privateKey: Promise<string>;
    originalMnemonic: string;
    derivationPath: string;
    type: string;
    subtype: string;
    chainId: number;
    sign: (...any: any[]) => Promise<string>;
    signMessage: (...any: any[]) => Promise<string>;
    verifyMessage: (...any: any[]) => Promise<string>;
    constructor(ethersInstance: WalletArgumentsType);
    get keystore(): Promise<string>;
    get publicKey(): Promise<string | void>;
}
