"use strict";
/* @flow */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const hw_transport_u2f_1 = __importDefault(require("@ledgerhq/hw-transport-u2f"));
const hw_app_eth_1 = __importDefault(require("@ledgerhq/hw-app-eth"));
const defaults_1 = require("../purser-core/defaults");
const messages_1 = require("./messages");
const defaults_2 = require("./defaults");
/**
 * Create a new Ledger U2F transport and connection to the Ethereum App
 *
 * @method ledgerConnection
 *
 * @return {Promise<Object>} If successfull. a new instance of the Ledger Ethereum App Class
 */
exports.ledgerConnection = () => __awaiter(void 0, void 0, void 0, function* () {
    const transport = yield hw_transport_u2f_1.default.create();
    return new hw_app_eth_1.default(transport);
});
/**
 * Handle Errors thrown by the Ledger U2F transaport
 *
 * @NOTE This method is designed to handle the Error after it has been caught,
 * not to handle the actual catching itself.
 * SO the most obvious place to use it is inside a `catch` block
 *
 * @method handleLedgerConnectionError
 *
 * @param {Error} errorInstance The caught Error
 * @param {String} specificMethodErrorMessage An extra error message, for method caught errors
 */
exports.handleLedgerConnectionError = (
/*
 * If the caught Error was thrown by the U2F transaport this will be an extended
 * instance of the Error Object.
 */
errorInstance, 
/*
 * This is just a string message to use for Errors that don't come from the transport
 */
specificMethodErrorMessage = '') => __awaiter(void 0, void 0, void 0, function* () {
    const u2fSupport = yield hw_transport_u2f_1.default.isSupported();
    let errorMessage = messages_1.transportErrors.notSupported;
    if (errorInstance instanceof Error) {
        if (u2fSupport && specificMethodErrorMessage) {
            errorMessage = specificMethodErrorMessage;
        }
        if (window.location.protocol !== defaults_1.HTTPS_PROTOCOL) {
            errorMessage = messages_1.transportErrors.notSecure;
        }
        if (u2fSupport && errorInstance.id === defaults_2.U2F_TRANSPORT_ERROR.TIMEOUT) {
            errorMessage = messages_1.transportErrors.timeout;
        }
    }
    throw new Error(errorMessage);
});
